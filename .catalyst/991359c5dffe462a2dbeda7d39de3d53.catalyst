{"title":"D. Non-zero Segments","contestId":"1426","problemIndex":"D","timeLimit":"2 seconds","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>Kolya got an integer array $$$a_1, a_2, \\dots, a_n$$$. The array can contain both positive and negative integers, but Kolya doesn&apos;t like $$$0$$$, so the array doesn&apos;t contain any zeros.</p><p>Kolya doesn&apos;t like that the sum of some subsegments of his array can be $$$0$$$. The subsegment is some consecutive segment of elements of the array. </p><p>You have to help Kolya and change his array in such a way that it doesn&apos;t contain any subsegments with the sum $$$0$$$. To reach this goal, you can insert any integers between any pair of adjacent elements of the array (integers can be really any: positive, negative, $$$0$$$, any by absolute value, even such a huge that they can&apos;t be represented in most standard programming languages).</p><p>Your task is to find the minimum number of integers you have to insert into Kolya&apos;s array in such a way that the resulting array doesn&apos;t contain any subsegments with the sum $$$0$$$.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 200\\,000$$$) &#x2014; the number of elements in Kolya&apos;s array.</p><p>The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$-10^{9} \\le a_i \\le 10^{9}, a_i \\neq 0$$$) &#x2014; the description of Kolya&apos;s array.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>Print the minimum number of integers you have to insert into Kolya&apos;s array in such a way that the resulting array doesn&apos;t contain any subsegments with the sum $$$0$$$.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>Consider the first example. There is only one subsegment with the sum $$$0$$$. It starts in the second element and ends in the fourth element. It&apos;s enough to insert one element so the array doesn&apos;t contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer $$$1$$$ between second and third elements of the array.</p><p>There are no subsegments having sum $$$0$$$ in the second example so you don&apos;t need to do anything.</p>","sampleTestcases":[{"id":1617895624348,"input":"4\n1 -5 3 2\n","output":"1\n"},{"id":1617895624349,"input":"5\n4 -2 3 -9 2\n","output":"0\n"},{"id":1617895624350,"input":"9\n-1 1 -1 1 -1 1 1 -1 -1\n","output":"6\n"},{"id":1617895624351,"input":"8\n16 -5 -11 -15 10 5 4 -4\n","output":"3\n"}],"submitUrl":"https://codeforces.com/contest/1426/submit","language":"c++","editorial":"<div><p>Firstly, let&apos;s understand that the sum of the segment $$$[l; r]$$$ is zero if $$$p_r - p_{l - 1}$$$ is zero (in other words, $$$p_{l - 1} = p_r$$$), where $$$p_i$$$ is the sum of the first $$$i$$$ elements ($$$p_0 = 0$$$).</p><p>Let&apos;s iterate over elements from left to right and add all prefix sums in the set. If we get the sum that is already in the set, we get some segment with sum $$$0$$$, and we need to fix it somehow. Let&apos;s insert some huge number before the current element in such a way that all prefix sums starting from the current element to the end will be significantly bigger than all prefix sums to the left. In words of implementation, we just get rid of all prefix sums to the left (clear the set) and continue doing the same process starting from the current element (so we just cut off the prefix of the array).</p><p>This way is optimal because we remove all segments with sum $$$0$$$ ending at the current element using only one insertion (and we need to use at least one insertion to do that).</p><p>Time complexity: $$$O(n \\log{n})$$$.</p></div>"}